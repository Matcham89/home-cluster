apiVersion: kagent.dev/v1alpha2
kind: Agent
metadata:
  name: yt-agent
  namespace: kagent
spec:
  declarative:
    modelConfig: default-model-config
    systemMessage: |
      # YT-Scribe (Transcript → Blog Markdown → Handoff)

      You turn a YouTube **transcript** into a polished Markdown blog post and then hand off to `github-pusher`.
      **Do not** use the YouTube video description to write the blog body. The description may be used only as metadata (e.g., tags, context) if needed.

      ## Non-Negotiables
      - The blog content must be derived **only from the transcript** (`transcript` field from `get_video_info`).
      - If no transcript is available, do not fabricate a post from the description. Either:
        - Use STT fallback (if the environment enables transcript generation, e.g., Whisper), or
        - Ask the user for permission to enable STT or to provide a script/notes.
      - Confirm transcript retrieval success before writing.

      ## Retrieval
      - Call `get_video_info` with URL or video ID.
      - Use `transcript`, `transcriptLang`, `transcriptSource`, `embedUrl`, and `thumbnails` from the tool output.
      - Treat `title`/`description` returned by the API as **metadata only**. Do not copy description text into the blog body.

      ## Writing Rules (Transcript-Only)
      - First line MUST be a single `# Title` you create from the **transcript** (not copied verbatim from the video title unless it matches your summary).
      - Write a tight intro, clear sections, bullets where useful, and a short “Takeaways” section.
      - Preserve technical details, commands, config names, and URLs that appear in the transcript. Use fenced code blocks where appropriate.
      - Remove filler words, false starts, repeated phrases, and timestamp artifacts.
      - Keep tone casual but accurate for beginners and experts.

      ## Integrity Gate
      - If `hasTranscript == false` (and no STT fallback is available/enabled), stop and ask the user for next steps. Do not write a post from the video description.
      - If transcript length is very short or garbled (below your quality threshold), ask to re-run with STT fallback or provide manual notes.

      ## Optional Video Embed
      - If `embedUrl` is available, append a raw `<iframe>` embed at the end of the post.

      ## No Front Matter in Body
      - Do NOT insert YAML front matter into the Markdown. The `github-pusher` will inject/merge it.

      ## Default Front Matter (for handoff data only; publisher injects)
      - classes: "wide"
      - header.overlay_color: "#000"
      - header.overlay_filter: "0.5"
      - header images (overlay/teaser/og): if `thumbnails.primary` exists, the publisher will set them; otherwise omitted.

      ## Handoff Contract (STRICT JSON payload to `github-pusher`)
      {
        "action": "publish-markdown",
        "repo": "Matcham89/chrismatcham-dev",
        "target_branch": "main",
        "post_dir": "_posts",
        "date_utc": "YYYY-MM-DD",
        "title": "<from your H1, derived from transcript>",
        "slug": "<kebab-case-of-title>",
        "markdown": "<full markdown body WITHOUT front matter>",
        "front_matter": {
          "classes": "wide",
          "header": {
            "overlay_color": "#000",
            "overlay_filter": "0.5"
          },
          "layout": "single",
          "categories": [],
          "tags": []
        },
        "video": {
          "youtube_id": "<id-or-null>",
          "embed_url": "<embedUrl or null>"
        },
        "thumbnails": {
          "primary": "<external URL if available>",
          "fallback": "<external URL if available>"
        },
        "pr_title": "Blog: <title>",
        "pr_body": "Short 2–4 sentence summary of the post (derived from transcript).",
        "branch_name": "post/<YYYY-MM-DD>-<slug>",
        "provenance": {
          "transcriptSource": "<manual|auto|whisper>",
          "transcriptLang": "<en|...>",
          "transcriptChars": <int>
        }
      }

      ## Workflow
      1) Call `get_video_info` → verify `hasTranscript == true` (or STT fallback available/enabled).
      2) Write the Markdown **only from the transcript**.
      3) Build the JSON payload (include `provenance` so the publisher/PR reviewers can see the source).
      4) Call the `github-pusher` Agent tool with that JSON.
      5) Return a short checklist (title, slug, handoff status, transcriptSource/lang).

      ## Final Response Format (after handoff)
      - ✅ Title: <title>
      - ✅ Slug: <slug>
      - ✅ Transcript: <transcriptSource>/<transcriptLang>
      - ✅ Handoff: sent to github-pusher on branch `post/<date>-<slug>`

    a2aConfig:
      skills:
        - id: transcript-retrieval
          name: Transcript Retrieval
          description: The ability to fetch YouTube transcripts using the MCP tool.
          examples:
            - "Get the transcript for this video."
            - "Fetch the captions of a given YouTube ID."
          tags:
            - transcript
            - fetch
        - id: transcript-rewriting
          name: Transcript Rewriting
          description: The ability to rewrite transcript text into a blog post format.
          examples:
            - "Turn this transcript into a blog."
            - "Rewrite this video content for a casual blog audience."
          tags:
            - rewrite
            - blog
        - id: content-clarification
          name: Content Clarification
          description: The ability to identify missing or unclear transcript data and ask clarifying questions.
          examples:
            - "This transcript seems incomplete, can you re-run?"
            - "Can you specify the target audience?"
          tags:
            - clarification
            - questions

        - id: publish-handoff
          name: Publish Handoff
          description: After generating Markdown, hand off to the github-pusher agent with a JSON payload that includes title, slug, date_utc, branch_name, repo, post_dir, target_branch, markdown, pr_title, and pr_body.
          examples:
            - "Publish this Markdown to GitHub as a PR."
            - "Open a PR with this blog post."
          tags: [handoff, github, publish, pr]

    tools:
      - mcpServer:
          kind: Service
          name: yt-kmcp-kagent
          toolNames:
            - get_video_info
        type: McpServer
      - agent:
          apiGroup: kagent.dev
          kind: Agent
          name: github-pusher
        type: Agent

  description: An AI Agent that retrieves YouTube transcripts and rewrites them into beginner-friendly yet expert-accurate Markdown blog posts.

---

# MCPServer deployment generated by kmcp deploy
# Project: yt-kmcp
# Framework: fastmcp-python
apiVersion: kagent.dev/v1alpha1
kind: MCPServer
metadata:
  annotations:
    kmcp.dev/description: MCP server built with fastmcp-python
    kmcp.dev/project-name: yt-kmcp
  labels:
    app.kubernetes.io/component: mcp-server
    app.kubernetes.io/instance: yt-kmcp
    app.kubernetes.io/managed-by: kmcp
    app.kubernetes.io/name: yt-kmcp
    app.kubernetes.io/part-of: kmcp
    kmcp.dev/framework: fastmcp-python
    kmcp.dev/version: 0.1.0
  name: yt-kmcp
  namespace: kagent
spec:
  deployment:
    args:
    - src/main.py
    cmd: python
    image: matcham89/yt-kmcp:0.2.0
    port: 3000
    secretRefs:
    - name: yt-kmcp-secrets-staging
    - name: yt-kmcp-env-vars
  stdioTransport: {}
  transportType: stdio

---


apiVersion: v1
kind: Service
metadata:
  name: yt-kmcp-kagent
  namespace: kagent
  annotations:
    kagent.dev/mcp-service-path: /mcp
    kagent.dev/mcp-service-port: "3000"
  labels:
    kagent.dev/mcp-service: "true"
spec:
  ports:
  - appProtocol: mcp
    name: mcp
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app.kubernetes.io/instance: yt-kmcp
    app.kubernetes.io/name: yt-kmcp
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
