apiVersion: kagent.dev/v1alpha2
kind: Agent
metadata:
  name: yt-agent
  namespace: kagent
spec:
  declarative:
    modelConfig: default-model-config
    systemMessage: |
      # YouTube Transcript Agent System Prompt

      You are YT-Scribe, an AI agent specialized in retrieving and rewriting YouTube transcripts into clear, blog-ready summaries.  
      Your role is to:
      
      - Pull the transcript using the "get_video_info" MCP tool.  
      - Confirm that transcript data has been successfully retrieved.  
      - Rewrite the transcript into Markdown suitable for a casual yet informative blog post.  
      - Ensure the content makes sense to both beginners and experts.  
      - Re-read and refine the blog as many times as needed to achieve clarity and flow.  
      - If transcript data is missing or unclear, ask the user for clarification or additional context.  
      
      ## Core Capabilities
      - **Transcript Retrieval**: Call the MCP tool and extract raw transcript data.  
      - **Content Transformation**: Convert technical or spoken language into written blog form with headings, lists, and readable structure.  
      - **Audience Awareness**: Adjust tone to be engaging for beginners without oversimplifying for experts.  
      - **Iterative Refinement**: Re-draft until the blog post flows naturally and the information is accurate.  

      ## Workflow
      1. Use the tool to pull transcript data.  
      2. Confirm successful retrieval.  
      3. Rewrite into Markdown blog format (casual, informative).  
      4. Re-read and rewrite as needed.  
      5. Verify the result is understandable to both novice and expert readers.  
      6. If anything is ambiguous, ask clarifying questions.  

      ## Response Format
      Always return responses in Markdown, with:  
      - Clear blog-style title  
      - Introductory paragraph  
      - Section headings  
      - Lists or bullet points for clarity  
      - A closing summary or takeaway  
    a2aConfig:
      skills:
        - id: transcript-retrieval
          name: Transcript Retrieval
          description: The ability to fetch YouTube transcripts using the MCP tool.
          examples:
            - "Get the transcript for this video."
            - "Fetch the captions of a given YouTube ID."
          tags:
            - transcript
            - fetch
        - id: transcript-rewriting
          name: Transcript Rewriting
          description: The ability to rewrite transcript text into a blog post format.
          examples:
            - "Turn this transcript into a blog."
            - "Rewrite this video content for a casual blog audience."
          tags:
            - rewrite
            - blog
        - id: content-clarification
          name: Content Clarification
          description: The ability to identify missing or unclear transcript data and ask clarifying questions.
          examples:
            - "This transcript seems incomplete, can you re-run?"
            - "Can you specify the target audience?"
          tags:
            - clarification
            - questions

        - id: publish-handoff
          name: Publish Handoff
          description: After generating Markdown, hand off to the github-pusher agent with a JSON payload that includes title, slug, date_utc, branch_name, repo, post_dir, target_branch, markdown, pr_title, and pr_body.
          examples:
            - "Publish this Markdown to GitHub as a PR."
            - "Open a PR with this blog post."
          tags: [handoff, github, publish, pr]

    tools:
      - mcpServer:
          kind: Service
          name: yt-kmcp-kagent
          toolNames:
            - get_video_info
        type: McpServer
      - agent:
          apiGroup: kagent.dev
          kind: Agent
          name: github-pusher
        type: Agent

  description: An AI Agent that retrieves YouTube transcripts and rewrites them into beginner-friendly yet expert-accurate Markdown blog posts.

---

# MCPServer deployment generated by kmcp deploy
# Project: yt-kmcp
# Framework: fastmcp-python
apiVersion: kagent.dev/v1alpha1
kind: MCPServer
metadata:
  annotations:
    kmcp.dev/description: MCP server built with fastmcp-python
    kmcp.dev/project-name: yt-kmcp
  labels:
    app.kubernetes.io/component: mcp-server
    app.kubernetes.io/instance: yt-kmcp
    app.kubernetes.io/managed-by: kmcp
    app.kubernetes.io/name: yt-kmcp
    app.kubernetes.io/part-of: kmcp
    kmcp.dev/framework: fastmcp-python
    kmcp.dev/version: 0.1.0
  name: yt-kmcp
  namespace: kagent
spec:
  deployment:
    args:
    - src/main.py
    cmd: python
    image: matcham89/yt-kmcp:0.1.0
    port: 3000
    secretRefs:
    - name: yt-kmcp-secrets-staging
    - name: yt-kmcp-env-vars
  stdioTransport: {}
  transportType: stdio

---


apiVersion: v1
kind: Service
metadata:
  name: yt-kmcp-kagent
  namespace: kagent
  annotations:
    kagent.dev/mcp-service-path: /mcp
    kagent.dev/mcp-service-port: "3000"
  labels:
    kagent.dev/mcp-service: "true"
spec:
  ports:
  - appProtocol: mcp
    name: mcp
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app.kubernetes.io/instance: yt-kmcp
    app.kubernetes.io/name: yt-kmcp
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
