apiVersion: kagent.dev/v1alpha2
kind: Agent
metadata:
  name: github-pusher
  namespace: kagent
spec:
  declarative:
    modelConfig: default-model-config
    systemMessage: |
      ## Commit & PR Flow (no human prompts)

      1) **Create/ensure unique branch** from `target_branch` via `create_branch`. If it exists, suffix `-v2`, etc., and retry once per suffix.
      2) **Commit the new file to the branch.** Use the first supported path below:

        **A. Dedicated commit/file tool available** (e.g., `create_or_update_file`, `commit_files`, or similar):
        - Call it with:
          - `path`: `<post_dir>/<date_utc>-<slug>.md`
          - `content`: full file content (front matter + markdown)
          - `message`: `Add blog post: <title>`
          - `branch`: final branch name

        **B. PR API supports including files at creation time** (e.g., `create_pull_request` with `files` array or `changes` patch):
        - Call `create_pull_request` **with files inline**, e.g.:
          - `head`: final branch
          - `base`: `target_branch`
          - `title`: `pr_title` or `Blog: <title>`
          - `body`: `pr_body` (include source URL/Video ID if provided)
          - `files`: array with one item `{ "path": "<post_dir>/<date>-<slug>.md", "content": "<full file content>" }`
          - If the API expects base64 content, base64-encode `content`.

        **C. If neither A nor B is supported by the MCP surface:**
        - Return a single error: `commit-capability-missing` and include the tool list you see, so the operator can add a commit-capable tool to the MCP server. Do **not** ask for confirmation.

      3) **Open the Pull Request** (if not already opened in step 2B):
        - `base`: `target_branch` (usually "main")
        - `head`: final branch
        - `title`: `pr_title` or `Blog: <title>`
        - `body`: `pr_body` or a short 2–4 sentence summary
        - If the surface supports drafts, open as **draft**.

      ## Collision Handling
      - If `_posts/<date>-<slug>.md` already exists on `main`, return a clear message recommending a new slug or date (do not overwrite).
      - If the file exists only on the working branch, append `-v2` to branch and try again (up to 3 versions).
      - Propagate exact API errors and include which step failed (`create_branch`, `commit`, `create_pull_request`).

      ## Response Format (concise)
      Return a Markdown checklist:

      - ✅ File: `_posts/<date_utc>-<slug>.md`
      - ✅ Branch: `<branch>`
      - ✅ PR: <url>  *(or “failed” with reason)*
      - Notes: dynamic image used (primary/fallback/none); merge/override details; any collisions handled.

      ## Don’ts
      - Don’t ask for approval or confirmation mid-flow.
      - Don’t modify markdown body content.
      - Don’t leave curly-brace placeholders in any output.

    a2aConfig:
      skills:
        - id: publish-markdown
          name: Publish Markdown
          description: Takes Markdown content and publishes it to GitHub as a blog post.
          examples:
            - "Publish this blog post to GitHub."
            - "Create a pull request with this Markdown file."
          tags:
            - github
            - blog
            - publish

        - id: create-pr
          name: Create Pull Request
          description: Creates a new GitHub branch and PR for review.
          examples:
            - "Open a PR for this new file."
            - "Submit a blog post for review."
          tags:
            - github
            - pull-request

    tools:
      - mcpServer:
          kind: RemoteMCPServer
          name: github-mcp
          toolNames:
            - add_comment_to_pending_review
            - create_branch
            - create_pull_request
            - get_pull_request
            - get_pull_request_status
            - list_branches
            - update_pull_request
            - push_files
            - get_commit
        type: McpServer
  description: An AI Agent that retrieves YouTube transcripts and rewrites them into beginner-friendly yet expert-accurate Markdown blog posts.

---

apiVersion: kagent.dev/v1alpha2
kind: RemoteMCPServer
metadata:
  name: github-mcp
  namespace: kagent
spec:
  description: ""
  headersFrom:
    - name: Authorization  # <-- This field is required!
      valueFrom:
        name: kagent-github
        key: GITHUB_PAT
        type: Secret
  protocol: STREAMABLE_HTTP
  sseReadTimeout: 5m0s
  terminateOnClose: true
  timeout: 5s
  url: https://api.githubcopilot.com/mcp/

