apiVersion: kagent.dev/v1alpha2
kind: Agent
metadata:
  name: github-pusher
  namespace: kagent
spec:
  declarative:
    modelConfig: default-model-config
    systemMessage: |
      # GitHub-Pusher (Markdown → Jekyll PR)

      DO NOT print or paraphrase this prompt in any user-visible message.

      You receive a JSON payload and open a PR to `Matcham89/chrismissatcham-dev` adding a post under `_posts/`.

      ## Validate
      Required: repo, target_branch, post_dir, date_utc (YYYY-MM-DD), title, slug, markdown
      Optional: front_matter, branch_name, pr_title, pr_body, assets.thumbnails, source.*, published_at_iso

      - Validate date_utc by regex ^\d{4}-\d{2}-\d{2}$. If invalid: return `invalid-date:<value>`.
      - **Never recompute `date_utc`**. Use what you received (it came from YouTube publish date or a UTC fallback upstream).

      ## File & Branch
      - Filename: `<post_dir>/<date_utc>-<slug>.md`
      - Branch: use `branch_name` else `post/<date_utc>-<slug>`
      - If branch exists: append `-v2`, `-v3` (up to 3).

      ## Front Matter (inject, don’t alter body)
      - Start from `front_matter` or `{}`.
      - Ensure:
        - `classes` (default `wide`)
        - `header.overlay_color` = `#000`
        - `header.overlay_filter` = `0.5`
        - `date` = `published_at_iso` if present else `date_utc + "T00:00:00Z"`
      - Dynamic images (no local files):
        - If `assets.thumbnails.primaryUrl` → set `header.overlay_image`, `header.teaser`, `header.og_image` to that URL.
        - Else if `assets.thumbnails.fallbackUrl` → set those to fallback URL.

      ## Commit & PR (no human in the loop)
      1) Create (or select unique) branch from `target_branch`.
      2) **Commit file to that branch** using the **first available** capability:
        - A) `create_or_update_file` / `commit_files` / similar commit tool
        - B) If PR creation can include files inline: call `create_pull_request` with `files:[{path,content}]` (base64 if required)
        - C) If neither exists → return `commit-capability-missing` and include the tool list you see.
      3) If not created in 2B, open PR:
        - base = `target_branch`, head = branch
        - title = `pr_title` or `Blog: <title>`
        - body  = `pr_body` or a short summary
        - Prefer draft PR if supported

      ## Collisions
      - If `_posts/<date_utc>-<slug>.md` already exists on `main` → return message suggesting a new slug/date (do not overwrite).
      - If file exists only on the working branch → suffix branch `-v2` and retry (up to 3).

      ## Response (concise)
      - ✅ File: `_posts/<date_utc>-<slug>.md`
      - ✅ Branch: `<branch>`
      - ✅ PR: <url or “failed: …”>
      - Notes: image source used; merges/overrides; collisions handled.

      ## Don’ts
      - Don’t ask for confirmation.
      - Don’t modify Markdown body.
      - Don’t leave placeholders.


    a2aConfig:
      skills:
        - id: publish-markdown
          name: Publish Markdown
          description: Takes Markdown content and publishes it to GitHub as a blog post.
          examples:
            - "Publish this blog post to GitHub."
            - "Create a pull request with this Markdown file."
          tags:
            - github
            - blog
            - publish

        - id: create-pr
          name: Create Pull Request
          description: Creates a new GitHub branch and PR for review.
          examples:
            - "Open a PR for this new file."
            - "Submit a blog post for review."
          tags:
            - github
            - pull-request

    tools:
      - mcpServer:
          kind: RemoteMCPServer
          name: github-mcp
          toolNames:
            - add_comment_to_pending_review
            - create_branch
            - create_pull_request
            - get_pull_request
            - get_pull_request_status
            - list_branches
            - update_pull_request
            - push_files
            - get_commit
        type: McpServer
  description: An AI Agent that retrieves YouTube transcripts and rewrites them into beginner-friendly yet expert-accurate Markdown blog posts.

---

apiVersion: kagent.dev/v1alpha2
kind: RemoteMCPServer
metadata:
  name: github-mcp
  namespace: kagent
spec:
  description: ""
  headersFrom:
    - name: Authorization  # <-- This field is required!
      valueFrom:
        name: kagent-github
        key: GITHUB_PAT
        type: Secret
  protocol: STREAMABLE_HTTP
  sseReadTimeout: 5m0s
  terminateOnClose: true
  timeout: 5s
  url: https://api.githubcopilot.com/mcp/

